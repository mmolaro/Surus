// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// RcppSVT
List RcppSVT(const Eigen::MatrixXd& X, double penalty);
RcppExport SEXP RAD_RcppSVT(SEXP XSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP );
        Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP );
        List __result = RcppSVT(X, penalty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// RcppSoftThresholdScalar
double RcppSoftThresholdScalar(double x, double penalty);
RcppExport SEXP RAD_RcppSoftThresholdScalar(SEXP xSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP );
        double __result = RcppSoftThresholdScalar(x, penalty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// RcppSoftThresholdVector
Eigen::ArrayXd RcppSoftThresholdVector(const Eigen::ArrayXd& x, double penalty);
RcppExport SEXP RAD_RcppSoftThresholdVector(SEXP xSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP );
        Eigen::ArrayXd __result = RcppSoftThresholdVector(x, penalty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// RcppSoftThresholdMatrix
Eigen::MatrixXd RcppSoftThresholdMatrix(const Eigen::MatrixXd& x, double penalty);
RcppExport SEXP RAD_RcppSoftThresholdMatrix(SEXP xSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP );
        Eigen::MatrixXd __result = RcppSoftThresholdMatrix(x, penalty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// RcppRPCA
List RcppRPCA(Eigen::MatrixXd X, double Lpenalty = -1, double Spenalty = -1, bool verbose = false);
RcppExport SEXP RAD_RcppRPCA(SEXP XSEXP, SEXP LpenaltySEXP, SEXP SpenaltySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP );
        Rcpp::traits::input_parameter< double >::type Lpenalty(LpenaltySEXP );
        Rcpp::traits::input_parameter< double >::type Spenalty(SpenaltySEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        List __result = RcppRPCA(X, Lpenalty, Spenalty, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
